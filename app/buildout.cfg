# application deployment buildout for Plone 4.0
# with varnish->haproxy->[zope-times-2] (assumes you will put 
# apache, nginx, or some other front-end in front of varnish).

[buildout]
extends =
    src/build/postgres.cfg
    src/build/memcached.cfg
    src/build/plone.cfg
download-cache = downloads
parts += 
    pg_user
    relstorage_mkdb
    instance
    instance2
    instance3
    instance4
    worker
    debug-instance
    zopepy
    zodbscripts
    ipython
    omelette
    test
    coverage
    report
    haproxy-conf
    pcre
    haproxy14-build
    varnish3-build
    cache
    supervisor
    blobrsync
    blobrsync-chmod
    munin1
    munin2
    munin3
    secureconfig
    zodbupdate
    zodbupdate-patch
versions = versions

# =========================== CONFIG VALUES: =========================

[versions]
# RelStorage depends on perfmetrics:
perfmetrics = 2.0
ipython = 5.1.0
ftw.raven = 1.3.1
requests = 2.27.1
argcomplete = 1.12.3

[instance-env]
common = 
    zope_i18n_compile_mo_files true
    PTS_LANGUAGES en
    TMPDIR ${buildout:directory}/var/tmp
    RELSTORAGE_ABORT_EARLY true

[async]
autostart-worker = true

[site]
name = site
muninzopepasswd = overide_this_in_site.cfg
memmax = 512MB

[paths]
var = ${buildout:directory}/var
blob = ${buildout:directory}/var/blobstorage
log = ${paths:var}/log

[siteadmin]
user = admin
password = admin

[hosts]
# postgres by default over local domain socket:
postgres = ${buildout:directory}/var/postgres

[ports]
zope1 = 18080
zope2 = 18081
zope3 = 18082
zope4 = 18083
debug = 18181
worker = 18999
supervisor = 19001
varnish = 18880
haproxy = 18881

# ============================== PARTS: ==============================


[pg_user]
recipe = collective.recipe.cmd
on_install = true
on_update = false
cmds = 
    echo "=== Creating PostgreSQL user for applications ==="
    ${postgresql:prefix}/bin/postgres --single -D ${sqlinit:datadir} \
            template1 << EOF
        CREATE USER ${siteadmin:user} WITH PASSWORD '${siteadmin:password}';
    EOF
dependents = true #order hack


[relstorage_mkdb]
recipe = collective.recipe.cmd
on_install = true
on_update = false
cmds = 
    echo "Depends on ${pg_user:dependents}" > /dev/null
    echo "=== Creating PostgreSQL database for ZODB (RelStorage) ==="
    ${postgresql:prefix}/bin/postgres --single -D ${sqlinit:datadir} \
            template1 << EOF
        CREATE DATABASE plone_zodb OWNER ${siteadmin:user};
    EOF


[zodbupdate]
recipe = zc.recipe.egg
egg = zodbupdate


[zodbupdate-patch]
recipe = collective.recipe.cmd
on_install = true
on_update = false
cmds = 
    echo "Patching ${zodbupdate:egg}"
    cat ${buildout:directory}/src/build/record_iternext_patch.py >> ${buildout:directory}/eggs/zodbupdate-0.5-py2.7.egg/zodbupdate/update.py


[instance]
# === Plone instance, with QI Teamspace eggs ===
recipe = plone.recipe.zope2instance
user = ${siteadmin:user}:${siteadmin:password}
http-address = ${hosts:local}:${ports:zope1}
http-fast-listen = off
zodb-cache-size = 50000
zserver-threads = 4
python-check-interval = 1200
debug-mode = off
verbose-security = off
shared-blob = on
blob-storage = ${paths:blob}
rel-storage = 
    type postgresql
    dsn dbname=plone_zodb host=${hosts:postgres} port=${ports:postgres}
    blob-dir ${paths:blob}
    shared-blob-dir true
    cache-module-name relstorage.pylibmc_wrapper
    cache-servers ${buildout:directory}/var/memcached.sock
    cache-prefix plone4
    cache-local-mb 128
    poll-interval 60
eggs =
    Products.CMFPlone
    RelStorage
    munin.zope
    ftw.raven
    lxml
    ${zodbupdate:egg}
    ${psycopg2:egg}
    ${pylibmc:egg}
    ${buildout:eggs}
zcml =
    munin.zope
    z3c.form-meta
zcml-additional =
    <include package="plone.app.async" file="single_db_instance.zcml" />
zope-conf-additional = 
    trusted-proxy ${hosts:local}
environment-vars = 
    ${instance-env:common}
    ZC_ASYNC_UUID ${buildout:directory}/var/instance-uuid.txt

[instance2]
<= instance
http-address = ${hosts:local}:${ports:zope2}


[instance3]
<= instance
http-address = ${hosts:local}:${ports:zope3}


[instance4]
<= instance
http-address = ${hosts:local}:${ports:zope4}


[debug-instance]
<= instance
http-address = ${hosts:local}:${ports:debug} 
http-fast-listen = on
debug-mode = on
verbose-security = on


[worker]
recipe = plone.recipe.zope2instance
user = ${instance:user}
http-address = ${hosts:local}:${ports:worker}
zserver-threads = 1
zodb-cache-size = 40000
python-check-interval = 1200
debug-mode = off
verbose-security = off
shared-blob = on
blob-storage = ${instance:blob-storage}
rel-storage = ${instance:rel-storage}
eggs = ${instance:eggs}
zcml-additional =
    <include package="plone.app.async" file="single_db_worker.zcml" />
environment-vars =
    ${instance-env:common}
    ZC_ASYNC_UUID ${buildout:directory}/var/worker-uuid.txt

[coverage]
recipe = zc.recipe.egg
eggs = coverage
initialization =
    include = '--source=${buildout:directory}/src'
    sys.argv = sys.argv[:] + ['run', include, 'bin/test', '--all']


[test]
recipe = zc.recipe.testrunner
eggs = 
    ${instance:eggs}
    mock
    plone.app.search [test]
    plone.app.testing [test]
    plone.schemaeditor [test]
    plone.app.robotframework
defaults = ['--auto-color', '--auto-progress']


[report]
recipe = zc.recipe.egg
eggs = coverage
scripts = coverage=report
initialization =
    sys.argv = sys.argv[:] + ['html', '-i']


[zopepy]
recipe = zc.recipe.egg
eggs = ${instance:eggs}
interpreter = zopepy
scripts = zopepy


[ipython]
# like zopepy, but different
recipe=zc.recipe.egg
eggs =
    ${instance:eggs}
    ipython
scripts = ipython


[omelette]
recipe = collective.recipe.omelette
eggs = ${instance:eggs}


[zodbscripts]
recipe = zc.recipe.egg
eggs = ${instance:eggs}
scripts = zodbpack zodbconvert


[pcre]
recipe = hexagonit.recipe.cmmi
url = http://ftp.pcre.org/pub/pcre/pcre-8.45.tar.gz
md5sum = 01b80f8177ab91da63e7e5c5d5dfcb83
prefix = ${buildout:directory}/parts/opt


[haproxy14-build]
recipe = hexagonit.recipe.cmmi
url = http://haproxy.1wt.eu/download/1.4/src/haproxy-1.4.24.tar.gz
md5sum = 86422620faa9759907563d5e0524b98c
ignore-existing = true
make-options =
    USE_PCRE=1 
    DESTDIR=${buildout:directory}/parts/opt
    PREFIX=''
    PCREDIR=${pcre:prefix}
    TARGET=generic
    CPU=x86_64
    LDFLAGS=-Wl,-rpath,${buildout:parts-directory}/opt/lib
configure-command = echo "HAProxy does not use ./configure, skipping"


[haproxy-conf]
recipe = collective.recipe.template
input = ${buildout:directory}/src/build/haproxy.conf.in
output = ${buildout:directory}/etc/haproxy.conf
overwrite = true
maxconn = 1024
bind = ${hosts:local}:${ports:haproxy}


[varnish3-build]
recipe = hexagonit.recipe.cmmi
url = https://varnish-cache.org/_downloads/6d2854815f5e4b755205d5f01fce665c/varnish-3.0.7.tgz
md5sum = aa63a7808d775c005d020c41f152b7af
ignore-existing = true
prefix = ${buildout:directory}/parts/opt
configure-options = 
    --with-rst2man=${buildout:directory}/../python27/bin/rst2man.py
    --with-rst2html=${buildout:directory}/../python27/bin/rst2html.py
environment =
    PCRE_CFLAGS=-I${buildout:directory}/parts/opt/include
    PCRE_LIBS="-L${buildout:directory}/parts/opt/lib -lpcre"


[cache]
recipe = plone.recipe.varnish==1.3
varnish_version = 3
daemon = ${buildout:parts-directory}/opt/sbin/varnishd
bind = ${hosts:local}:${ports:varnish}
backends = 
    ${hosts:local}:${ports:haproxy}
cache-size = 384M
cache-type = file
first-byte-timeout = 600s
mode = foreground
vcl_recv =
    if (req.url ~ "(?i)(\.(m4v|mp4|mpg|mpeg|avi|wmv|mov|asf|flv|ogv|webm|iso)|@@stream)(\?.*)?$") {
        /** 
         *  PIPE URLs INFERRED TO BE VIDEO/LARGE FILES: 
         *  -------------------------------------------
         * 
         *  use pipe to origin for video files; because varnish is
         *  store-and-forward, and streaming functionality is not
         *  available as open-source (practically speaking), we are
         *  stuck with not being able to cache OR serve media files
         *  exceeding cache size.
         * 
         *  Using 'pipe' gets around this, breaking out of the
         *  store/forward model for the proxied connection.
         *
         *  There is an alternative trick that involves varnish fetching
         *  from the backend and restarting based on Content-length, but
         *  this requires varnish fetching the entire backend request,
         *  which seems suboptimal in the general case vs just infering
         *  indirectly that the file is large based on is extension.
         *  
         *  In a more specific case where video is frequently downloaded
         *  and RAM is plentiful (e.g. not a VPS/VM), it might make sense
         *  to have a dedicated cache and/or try the custom-header/restart
         *  trick, which would also support RANGE requests.
         *      http://goo.gl/m8bDGx
         * 
         *  Use of pipe is provided with the caveat that we close the
         *  connection for the backend-request (bereq) every time.
         *
         *  See: https://www.varnish-cache.org/trac/wiki/VCLExamplePipe
         */
         return(pipe);
    }
    if (req.url ~ "(?i)(foldercontents_get_table)(\?.*)?$") {
        /**
         * avoid caching ajax folder contents toggle results, which
         * is a resulting caching mistake in Plone 4.
         */
        return(pass);
    }
vcl_pipe =
    set bereq.http.connection = "close";
vcl_fetch =
    /** this duplicates stock plone.recipe.varnish config for vcl_fetch, in
     *  part, but takes precidence due to order of operations and return.
     *  Purpose of this is to add X-Cacheable header
     */
    if (!beresp.ttl <= 0s) {
        set beresp.http.X-Cacheable = "NO:Not Cacheable";
    }
    if (beresp.http.Set-Cookie) {
        set beresp.http.X-Cacheable = "NO:Set-Cookie";
        return(hit_for_pass);
    }
    if (beresp.http.Cache-Control ~ "(private|no-cache|no-store)") {
        set beresp.http.X-Cacheable = "NO:Cache-Control=private";
        return(hit_for_pass);
    }
    if (beresp.http.Authorization && !beresp.http.Cache-Control ~ "public") {
        set beresp.http.X-Cacheable = "NO";
        return(hit_for_pass);
    }
    set beresp.http.X-Cacheable = "YES";
    return(deliver);
vcl_deliver =
    /** X-Cache header added */
    if (obj.hits > 0) {
        set resp.http.X-Cache = "HIT";
    } else {
        set resp.http.X-Cache = "MISS";
    }

[supervisor]
recipe = collective.recipe.supervisor
plugins = superlance
port = ${hosts:local}:${ports:supervisor}
user = ${siteadmin:user}
password = ${siteadmin:password}
serverurl = http://${hosts:local}:${ports:supervisor}
supervisord-conf = ${buildout:directory}/etc/supervisord.conf
programs = 
    10 postgres     (stopsignal=INT) ${postgresql:prefix}/bin/postmaster [-D ${buildout:directory}/etc/] ${buildout:directory} true
    20 memcached    ${memcached:prefix}/bin/memcached [-m 256 -s ${buildout:directory}/var/memcached.sock] ${memcached:prefix} true
    40 instance     (stopsignal=INT stopwaitsecs=60) ${buildout:bin-directory}/instance [console] ${instance:location}
    50 instance2    (stopsignal=INT stopwaitsecs=60) ${buildout:bin-directory}/instance2 [console] ${instance2:location}
    50 instance3    (stopsignal=INT stopwaitsecs=60) ${buildout:bin-directory}/instance3 [console] ${instance3:location}
    50 instance4    (stopsignal=INT stopwaitsecs=60) ${buildout:bin-directory}/instance4 [console] ${instance4:location}
    55 worker       (autostart=${async:autostart-worker} stopsignal=INT stopwaitsecs=60) ${buildout:bin-directory}/worker [console] ${worker:location}
    60 haproxy      ${buildout:directory}/parts/opt/sbin/haproxy [ -f ${buildout:directory}/etc/haproxy.conf -db ]
    70 cache        (exitcodes=0) ${buildout:bin-directory}/cache
eventlisteners =
    memmon  TICK_60 ${buildout:bin-directory}/memmon [-p instance=${site:memmax}]
    memmon2 TICK_60 ${buildout:bin-directory}/memmon [-p instance2=${site:memmax}]
    memmon3 TICK_60 ${buildout:bin-directory}/memmon [-p instance3=${site:memmax}]
    memmon4 TICK_60 ${buildout:bin-directory}/memmon [-p instance4=${site:memmax}]

[blobrsync]
recipe = collective.recipe.template
input = ${buildout:directory}/src/build/blobrsync.sh.in
output = ${buildout:bin-directory}/blobrsync.sh
overwrite = true
blobdir = ${paths:var}/blobstorage
backupdir = ${paths:var}/backups

[blobrsync-chmod]
recipe = collective.recipe.cmd
on_install = true
on_update = true
cmds = 
    chmod 754 ${blobrsync:output}

[munin1]
recipe = zc.recipe.egg
eggs = munin.zope
scripts = munin=munin1
arguments = ip_address='${hosts:local}', http_address='${ports:zope1}', user='munin:${site:muninzopepasswd}'

[munin2]
recipe = zc.recipe.egg
eggs = munin.zope
scripts = munin=munin2
arguments = ip_address='${hosts:local}', http_address='${ports:zope2}', user='munin:${site:muninzopepasswd}'

[munin3]
recipe = zc.recipe.egg
eggs = munin.zope
scripts = munin=munin3
arguments = ip_address='${hosts:local}', http_address='${ports:zope3}', user='munin:${site:muninzopepasswd}'

[secureconfig]
# secure read permissions on files that might contain site-config passwords
recipe = collective.recipe.cmd
on_install = true
on_update = true
cmds = 
    chmod 600 ${buildout:directory}/etc/supervisord.conf
    chmod 600 ${buildout:directory}/.installed.cfg
    chmod 600 ${buildout:directory}/parts/instance*/etc/zope.conf
    chmod 600 ${buildout:directory}/parts/debug-instance/etc/zope.conf
    chmod 750 ${buildout:bin-directory}/munin*
    (if [ -f ${buildout:directory}/site.cfg ]; then chmod 600 ${buildout:directory}/site.cfg; fi)

