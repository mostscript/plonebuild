# application deployment buildout for Plone 4.0
# with varnish->haproxy->[zope-times-2] (assumes you will put 
# apache, nginx, or some other front-end in front of varnish).

[buildout]
extends =
    src/build/postgres.cfg
    src/build/memcached.cfg
    src/build/plone.cfg
download-cache = downloads
parts += 
    pg_user
    relstorage_mkdb
    instance
    instance2
    instance3
    debug-instance
    zopepy
    zodbscripts
    ipython
    omelette
    test
    coverage
    report
    haproxy-build
    haproxy-conf
    varnish-build
    cache
    supervisor
    blobrsync
    blobrsync-chmod
    munin1
    munin2
    munin3
    secureconfig
versions = versions

# =========================== CONFIG VALUES: =========================

[site]
name = site
muninzopepasswd = overide_this_in_site.cfg

[paths]
var = ${buildout:directory}/var
log = ${paths:var}/log

[siteadmin]
user = admin
password = admin

[hosts]
postgres = localhost

[ports]
zope1 = 18080
zope2 = 18081
zope3 = 18082
zope4 = 18083
debug = 18181
supervisor = 19001
varnish = 18880
haproxy = 18881

# ============================== PARTS: ==============================


[pg_user]
recipe = collective.recipe.cmd
on_install = true
on_update = false
cmds = 
    echo "=== Creating PostgreSQL user for applications ==="
    ${postgresql:prefix}/bin/postgres --single -D ${sqlinit:datadir} \
            template1 << EOF
        CREATE USER ${siteadmin:user} WITH PASSWORD '${siteadmin:password}';
    EOF
dependents = true #order hack


[relstorage_mkdb]
recipe = collective.recipe.cmd
on_install = true
on_update = false
cmds = 
    echo "Depends on ${pg_user:dependents}" > /dev/null
    echo "=== Creating PostgreSQL database for ZODB (RelStorage) ==="
    ${postgresql:prefix}/bin/postgres --single -D ${sqlinit:datadir} \
            template1 << EOF
        CREATE DATABASE plone4_zodb OWNER ${siteadmin:user};
    EOF


[instance]
# === Plone instance, with QI Teamspace eggs ===
recipe = plone.recipe.zope2instance
user = ${siteadmin:user}:${siteadmin:password}
http-address = ${hosts:local}:${ports:zope1}
http-fast-listen = off
zodb-cache-size = 40000
zserver-threads = 4
python-check-interval = 1200
debug-mode = off
verbose-security = off
shared-blob = on
blob-storage = ${buildout:directory}/var/blobstorage
rel-storage = 
    type postgresql
    dsn dbname=plone4_zodb host=${buildout:directory}/var/postgres port=${ports:postgres}
    blob-dir ${buildout:directory}/var/blobstorage
    shared-blob-dir true
    cache-module-name relstorage.pylibmc_wrapper
    cache-servers ${buildout:directory}/var/memcached.sock
    cache-prefix plone4
    cache-local-mb 100
    poll-interval 60
eggs =
    Products.CMFPlone
    RelStorage
    munin.zope
    ${lxml:egg}
    ${psycopg2:egg}
    ${pylibmc:egg}
    ${buildout:eggs}
zcml =
    munin.zope
zope-conf-additional = 
environment-vars = 
    zope_i18n_compile_mo_files true
    PTS_LANGUAGES = en
    TMPDIR ${buildout:directory}/var/tmp

[instance2]
<= instance
http-address = ${hosts:local}:${ports:zope2}


[instance3]
<= instance
http-address = ${hosts:local}:${ports:zope3}


[debug-instance]
<= instance
http-address = ${hosts:local}:${ports:debug} 
http-fast-listen = on
debug-mode = on
verbose-security = on


[coverage]
recipe = zc.recipe.egg
eggs = coverage
initialization =
    include = '--source=${buildout:directory}/src'
    sys.argv = sys.argv[:] + ['run', include, 'bin/test', '--all']


[test]
recipe = zc.recipe.testrunner
eggs = 
    ${instance:eggs}
    plone.app.search [test]
    plone.app.testing [test]
defaults = ['--auto-color', '--auto-progress']


[report]
recipe = zc.recipe.egg
eggs = coverage
scripts = coverage=report
initialization =
    sys.argv = sys.argv[:] + ['html', '-i']


[zopepy]
recipe = zc.recipe.egg
eggs = ${instance:eggs}
interpreter = zopepy
scripts = zopepy


[ipython]
# like zopepy, but different
recipe=zc.recipe.egg
find-links = http://pypi.python.org/packages/source/i/ipython/ipython-0.13.tar.gz#md5=9f04b590463dfe981e56ff1aebc90e23
eggs =
    ${instance:eggs}
    ipython
scripts = ipython


[omelette]
recipe = collective.recipe.omelette
eggs = ${instance:eggs}


[zodbscripts]
recipe = zc.recipe.egg
eggs = ${instance:eggs}
scripts = zodbpack zodbconvert


[haproxy-build]
recipe = plone.recipe.haproxy
url = http://dist.plone.org/thirdparty/haproxy-1.3.22.zip


[haproxy-conf]
recipe = collective.recipe.template
input = ${buildout:directory}/src/build/haproxy.conf.in
output = ${buildout:directory}/etc/haproxy.conf
user = ${env:USER}
gid = ${env:GID}
maxconn = 1024
bind = ${hosts:local}:${ports:haproxy}


[varnish-build]
recipe = zc.recipe.cmmi
url = http://downloads.sourceforge.net/project/varnish/varnish/2.0.6/varnish-2.0.6.tar.gz?r=http%3A%2F%2Fsourceforge.net%2Fprojects%2Fvarnish%2Ffiles%2F&ts=1290121536&use_mirror=voxel
md5sum = d91dc21c636db61c69b5e8f061c5bb95


[cache]
recipe = plone.recipe.varnish==1.0.2
daemon = ${buildout:parts-directory}/varnish-build/sbin/varnishd
bind = ${hosts:local}:${ports:varnish}
backends = 
    ${hosts:local}:${ports:haproxy}
cache-size = 256M
mode = foreground


[supervisor]
recipe = collective.recipe.supervisor
plugins = superlance
port = ${hosts:local}:${ports:supervisor}
user = ${siteadmin:user}
password = ${siteadmin:password}
serverurl = http://${hosts:local}:${ports:supervisor}
supervisord-conf = ${buildout:directory}/etc/supervisord.conf
programs = 
    10 postgres     (stopsignal=INT) ${postgresql:prefix}/bin/postmaster [-D ${buildout:directory}/etc/] ${buildout:directory} true
    20 memcached    ${memcached:prefix}/bin/memcached [-s ${buildout:directory}/var/memcached.sock] ${memcached:prefix} true
    40 instance     ${buildout:bin-directory}/instance [console] ${instance:location}
    50 instance2    ${buildout:bin-directory}/instance2 [console] ${instance2:location}
    50 instance3    ${buildout:bin-directory}/instance3 [console] ${instance3:location}
    60 haproxy      ${buildout:bin-directory}/haproxy [ -f ${buildout:directory}/etc/haproxy.conf -db ]
    70 cache        (exitcodes=0) ${buildout:bin-directory}/cache
eventlisteners =
    memmon  TICK_60 ${buildout:bin-directory}/memmon [-p instance=512MB]
    memmon2 TICK_60 ${buildout:bin-directory}/memmon [-p instance2=512MB]
    memmon3 TICK_60 ${buildout:bin-directory}/memmon [-p instance3=512MB]

[blobrsync]
recipe = collective.recipe.template
input = ${buildout:directory}/src/build/blobrsync.sh.in
output = ${buildout:bin-directory}/blobrsync.sh
blobdir = ${paths:var}/blobstorage
backupdir = ${paths:var}/backups

[blobrsync-chmod]
recipe = collective.recipe.cmd
on_install = true
on_update = true
cmds = 
    chmod 754 ${blobrsync:output}

[munin1]
recipe = zc.recipe.egg
eggs = munin.zope
scripts = munin=munin1
arguments = ip_address='${hosts:local}', http_address='${ports:zope1}', user='munin:${site:muninzopepasswd}'

[munin2]
recipe = zc.recipe.egg
eggs = munin.zope
scripts = munin=munin2
arguments = ip_address='${hosts:local}', http_address='${ports:zope2}', user='munin:${site:muninzopepasswd}'

[munin3]
recipe = zc.recipe.egg
eggs = munin.zope
scripts = munin=munin3
arguments = ip_address='${hosts:local}', http_address='${ports:zope3}', user='munin:${site:muninzopepasswd}'

[secureconfig]
# secure read permissions on files that might contain site-config passwords
recipe = collective.recipe.cmd
on_install = true
on_update = true
cmds = 
    chmod 600 ${buildout:directory}/etc/supervisord.conf
    chmod 600 ${buildout:directory}/.installed.cfg
    chmod 600 ${buildout:directory}/parts/instance/etc/zope.conf
    chmod 600 ${buildout:directory}/parts/instance2/etc/zope.conf
    chmod 600 ${buildout:directory}/parts/debug-instance/etc/zope.conf
    chmod 750 ${buildout:bin-directory}/munin*
    (if [ -f ${buildout:directory}/site.cfg ]; then chmod 600 ${buildout:directory}/site.cfg; fi)

